import re

def check_password_strength(password: str):
    # Criteria checks
    length_error = len(password) < 8
    lowercase_error = re.search(r"[a-z]", password) is None
    uppercase_error = re.search(r"[A-Z]", password) is None
    digit_error = re.search(r"\d", password) is None
    symbol_error = re.search(r"[!@#$%^&*(),.?\":{}|<>]", password) is None

    # Count total errors
    errors = {
        "length": length_error,
        "lowercase": lowercase_error,
        "uppercase": uppercase_error,
        "digit": digit_error,
        "symbol": symbol_error
    }

    # Determine strength
    error_count = sum(errors.values())
    if error_count == 0 and len(password) >= 12:
        strength = "Strong"
    elif error_count <= 2:
        strength = "Moderate"
    else:
        strength = "Weak"

    # Suggestions
    suggestions = []
    if length_error:
        suggestions.append("Use at least 8 characters.")
    if lowercase_error:
        suggestions.append("Include at least one lowercase letter.")
    if uppercase_error:
        suggestions.append("Include at least one uppercase letter.")
    if digit_error:
        suggestions.append("Include at least one number.")
    if symbol_error:
        suggestions.append("Include at least one special character (e.g., !@#$%).")
    if strength == "Moderate":
        suggestions.append("Consider making it 12+ characters for extra security.")

    return strength, suggestions


if __name__ == "__main__":
    print("🔐 Password Strength Checker 🔐")
    user_password = input("Enter a password to check: ")
    strength, tips = check_password_strength(user_password)

    print(f"\nPassword Strength: {strength}")
    if tips:
        print("Suggestions to improve:")
        for tip in tips:
            print(f"- {tip}")
